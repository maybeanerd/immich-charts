# Example: Using bundled PostgreSQL with an existing secret
# This is useful for production deployments where you want to manage passwords separately
# and avoid ArgoCD drift from random password generation

# Before deploying, create a secret with your database password:
#
# Method 1: Using kubectl
#   kubectl create secret generic immich-postgresql-secret \
#     --namespace immich \
#     --from-literal=password='YOUR-SECURE-PASSWORD'
#
# Method 2: Using a YAML manifest
#   apiVersion: v1
#   kind: Secret
#   metadata:
#     name: immich-postgresql-secret
#     namespace: immich
#   type: Opaque
#   stringData:
#     password: YOUR-SECURE-PASSWORD

# Configure bundled PostgreSQL to use the existing secret
postgresql:
  auth:
    existingSecret: immich-postgresql-secret
  primary:
    persistence:
      storageClass: null # Change to your storage class unless you want to use your default provider
      size: 100Gi

# Required: Set storage classes for your cluster
persistence:
  library:
    storageClass: null # Change to your storage class unless you want to use your default provider
    size: 500Gi
  external:
    storageClass: null # Change to your storage class unless you want to use your default provider
    size: 200Gi
  machine-learning-cache:
    storageClass: null # Change to your storage class unless you want to use your default provider
    size: 20Gi

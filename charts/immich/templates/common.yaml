---
{{- include "bjw-s.common.loader.init" . }}

{{/*
Common environment variables shared across all Immich components
*/}}
{{- define "immich.common.env" -}}
{{- /* Database configuration */ -}}
{{- $dbHost := .Values.immich.database.host | default (printf "%s-postgresql" .Release.Name) -}}
{{- $dbPort := .Values.immich.database.port | default 5432 -}}
{{- $dbUsername := .Values.immich.database.username | default "immich" -}}
{{- $dbName := .Values.immich.database.name | default "immich" -}}
{{- $dbPassword := .Values.immich.database.password -}}
{{- if not .Values.immich.database.host -}}
  {{- /* Use bundled PostgreSQL password if no external host is specified */ -}}
  {{- if .Values.postgresql -}}
    {{- if .Values.postgresql.global -}}
      {{- if .Values.postgresql.global.postgresql -}}
        {{- $dbUsername = .Values.postgresql.global.postgresql.auth.username | default $dbUsername -}}
        {{- $dbName = .Values.postgresql.global.postgresql.auth.database | default $dbName -}}
        {{- $dbPassword = .Values.postgresql.global.postgresql.auth.password | default $dbPassword -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- /* Redis configuration */ -}}
{{- $redisHost := .Values.immich.redis.host | default (printf "%s-redis-master" .Release.Name) -}}
{{- $redisPort := .Values.immich.redis.port | default 6379 -}}
{{- $redisHostname := printf "%s:%v" $redisHost $redisPort -}}
{{- if not .Values.immich.redis.port -}}
  {{- $redisHostname = $redisHost -}}
{{- end -}}

{{- /* Machine Learning configuration - always uses internal service */ -}}
{{- $mlUrl := printf "http://%s-machine-learning:3003" .Release.Name -}}

DB_HOSTNAME: {{ $dbHost | quote }}
DB_USERNAME: {{ $dbUsername | quote }}
DB_DATABASE_NAME: {{ $dbName | quote }}
{{- if kindIs "map" $dbPassword }}
DB_PASSWORD:
  {{- $dbPassword | toYaml | nindent 2 }}
{{- else }}
DB_PASSWORD: {{ $dbPassword | quote }}
{{- end }}
REDIS_HOSTNAME: {{ $redisHostname | quote }}
IMMICH_MACHINE_LEARNING_URL: {{ $mlUrl | quote }}
{{- end -}}

{{- define "immich.hardcodedValues" -}}
# Set the nameOverride based on the release name if no override has been set
{{ if not .Values.global.nameOverride }}
global:
  nameOverride: "{{ .Release.Name }}"
{{ end }}

# Common configurations
podAnnotations:
  checksum/config: '{{ .Values.immich.configuration | toYaml | sha256sum }}'

persistence:
  immich-config:
    type: configMap
    name: "{{ .Release.Name }}-immich-config"
    globalMounts:
      - path: /config
        readOnly: false
  # Disable machine-learning-cache if machine learning is disabled
  {{- if not .Values.immich.machineLearning.enabled }}
  machine-learning-cache:
    enabled: false
  {{- end }}

controllers:
  server:
    enabled: true
    strategy: RollingUpdate
    replicas: 1
    containers:
      main:
        enabled: true
        ports:
          - name: http
            containerPort: 2283
          - name: metrics-api
            containerPort: 8081
          - name: metrics-ms
            containerPort: 8082
        image:
          repository: ghcr.io/immich-app/immich-server
          tag: {{ .Values.image.tag | quote }}
          pullPolicy: IfNotPresent
        env:
          {{- include "immich.common.env" . | nindent 10 }}
          IMMICH_TELEMETRY_INCLUDE: 'all'
          IMMICH_CONFIG_FILE: /config/immich-config.yaml
        probes:
          liveness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /api/server/ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          readiness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /api/server/ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          startup:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /api/server/ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 30

  machine-learning:
    enabled: {{ .Values.immich.machineLearning.enabled }}
    strategy: RollingUpdate
    replicas: 1
    containers:
      main:
        enabled: true
        ports:
          - name: http
            containerPort: 3003
        image:
          repository: ghcr.io/immich-app/immich-machine-learning
          tag: {{ .Values.image.tag | quote }}
          pullPolicy: IfNotPresent
        env:
          {{- include "immich.common.env" . | nindent 10 }}
          TRANSFORMERS_CACHE: /cache
        probes:
          liveness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          readiness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          startup:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 60

service:
  server:
    enabled: true
    primary: true
    type: ClusterIP
    controller: server
    ports:
      http:
        enabled: true
        primary: true
        port: 2283
        protocol: HTTP
      metrics-api:
        enabled: {{ .Values.prometheus.enabled }}
        port: 8081
        protocol: HTTP
      metrics-ms:
        enabled: {{ .Values.prometheus.enabled }}
        port: 8082
        protocol: HTTP
  machine-learning:
    enabled: {{ .Values.immich.machineLearning.enabled }}
    type: ClusterIP
    controller: machine-learning
    ports:
      http:
        enabled: true
        primary: true
        port: 3003
        protocol: HTTP

{{- if .Values.prometheus.enabled }}
serviceMonitor:
  server:
    enabled: true
    serviceName: server
    endpoints:
      - port: metrics-api
        scheme: http
      - port: metrics-ms
        scheme: http
{{- end }}

ingress:
  server:
    enabled: {{ .Values.ingress.server.enabled }}
    annotations:
      {{- .Values.ingress.server.annotations | toYaml | nindent 6 }}
    hosts:
      - host: {{ (index .Values.ingress.server.hosts 0).host }}
        paths:
          - path: {{ (index (index .Values.ingress.server.hosts 0).paths 0).path }}
            service:
              identifier: server
              port: http
    tls:
      {{- .Values.ingress.server.tls | toYaml | nindent 6 }}
{{- end -}}

{{- /* First merge PostgreSQL and Redis defaults */ -}}
{{- $_ := mergeOverwrite .Values (include "immich.postgresql.defaults" . | fromYaml) -}}
{{- $_ := mergeOverwrite .Values (include "immich.redis.defaults" . | fromYaml) -}}

{{- /* Then merge hardcodedValues which includes auto-disable logic */ -}}
{{- $_ := mergeOverwrite .Values (include "immich.hardcodedValues" . | fromYaml) -}}

{{/* Render the templates */}}
{{ include "bjw-s.common.loader.generate" . }}
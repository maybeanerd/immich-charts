---
{{- include "bjw-s.common.loader.init" . }}

{{- define "immich.templatedValues" -}}
# Set the nameOverride based on the release name if no override has been set
{{ if not .Values.global.nameOverride }}
global:
  nameOverride: "{{ .Release.Name }}"
{{ end }}

persistence:
  {{- if .Values.immich.configuration }}
  immich-config:
    type: configMap
    name: "{{ .Release.Name }}-immich-config"
    globalMounts:
      - path: /config
        readOnly: false
  {{- end }}

  library:
    type: persistentVolumeClaim
    advancedMounts:
      server:
        main:
          - path: /usr/src/app/upload

  machine-learning-cache:
    enabled: false
    type: persistentVolumeClaim
    advancedMounts:
      machine-learning:
        main:
          - path: /cache


serviceMonitor:
  server:
    serviceName: server
    endpoints:
      - port: metrics-api
        scheme: http
      - port: metrics-ms
        scheme: http

service:
  server:
    controller: server
    primary: true
    ports:
      http:
        primary: true
        port: 2283
        protocol: HTTP
      metrics-api:
        port: 8081
        protocol: HTTP
      metrics-ms:
        port: 8082
        protocol: HTTP

  machine-learning:
    controller: machine-learning
    ports:
      http:
        port: 3003
        protocol: HTTP


rawResources:
  psql:
    enabled: false
    apiVersion: postgresql.cnpg.io/v1
    kind: Cluster
    spec:
      spec:
        imageCatalogRef:
          apiGroup: postgresql.cnpg.io
          kind: ImageCatalog
          name: '{{ .Release.Name }}-vchord-images'
          major: 17
        instances: 1
        postgresql:
          shared_preload_libraries:
            - "vchord.so"
        managed:
          roles:
            - name: immich
              superuser: true
              login: true
        bootstrap:
          initdb:
            database: immich
            owner: immich
            secret:
              name: immich-psql
            postInitSQL:
              - CREATE EXTENSION IF NOT EXISTS vchord CASCADE;
        storage:
          size: 8Gi
          # storageClass: ''

  # use ImageCatalog since vchord image tag does not have pg major version directly `:17`
  vchord-images:
    enabled: '{{ .Values.rawResources.psql.enabled }}'
    apiVersion: postgresql.cnpg.io/v1
    kind: ImageCatalog
    spec:
      spec:
        images:
          - major: 17
            image: ghcr.io/tensorchord/vchord-postgres:pg17-v0.4.3

{{- end -}}

{{- define "immich.common.templatedEnvs" -}}
{{- if .Values.immich.configuration }}
IMMICH_CONFIG_FILE: /config/immich-config.yaml
{{- end }}
REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
DB_HOSTNAME: "{{ .Release.Name }}-postgresql"
DB_USERNAME: "{{ .Values.postgresql.global.postgresql.auth.username }}"
DB_DATABASE_NAME: "{{ .Values.postgresql.global.postgresql.auth.database }}"
# -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
DB_PASSWORD: "{{ .Values.postgresql.global.postgresql.auth.password }}"
{{- end }}

{{- $ctx := deepCopy . -}}

{{- $containersEnvs := include "immich.common.templatedEnvs" . | fromYaml | merge (dig "immich" "env" (dict) $ctx.Values) | dict "env" | dict "main" | dict "containers" -}}

{{- $_ := include "immich.templatedValues" . | fromYaml | merge $ctx.Values -}}

{{- $_ = include "immich.server.templatedValues" . | fromYaml | merge (deepCopy $containersEnvs) | dict "server" | dict "controllers" | merge $ctx.Values -}}
{{- $_ = include "immich.machine-learning.templatedValues" . | fromYaml | merge $containersEnvs | dict "machine-learning" | dict "controllers" | merge $ctx.Values -}}


{{/* Render the templates */}}
{{ include "bjw-s.common.loader.generate" $ctx }}


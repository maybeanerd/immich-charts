# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.1.2/charts/other/app-template/values.schema.json

# These entries are shared between all the Immich components

# TODO provide top level configs for things like persistence, using included DB, using included redis, DB settings (such as HDD vs SSD mode)
# Also validate them in the checks.yaml

image:
  repository: ghcr.io/immich-app/immich-server
  tag: v1.135.3

immich:
  # env:
  #   REDIS_HOSTNAME: 'immich-redis.app-gallery.svc.cluster.local'
  #   DB_HOSTNAME: "shared-ha.infra-psql.svc.cluster.local"
  #   DB_USERNAME: "immich"
  #   DB_DATABASE_NAME: "immich"
  #   DB_PASSWORD:
  #     valueFrom:
  #       secretKeyRef:
  #         name: immich-psql
  #         key: password
  metrics:
    enabled: true
  # TODO move to be managed in common values
  # configuration is immich-config.json converted to yaml
  # ref: https://immich.app/docs/install/config-file/
  configuration: {}
  # trash:
  #   enabled: false
  #   days: 30
  # storageTemplate:
  #   enabled: true
  # template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

controllers:
  server:
    enabled: true
    # containers:
    #   main: {}
  machine-learning:
    enabled: true
    containers:
      main: {}
        # resources:
        #   limits:
        #     nvidia.com/gpu.shared: '1'

# see https://bjw-s-labs.github.io/helm-charts/docs/common-library/storage/types/persistentVolumeClaim/#existing-claim
persistence:
   immich-library:
     accessMode: ReadWriteOnce
     size: 100Gi
     nameOverride: ''
     storageClass: ''
   immich-external:
     accessMode: ReadWriteOnce
     size: 100Gi
  # Optional: Set this to pvc to avoid downloading the ML models every start.
  # machine-learning-cache:
  #   enabled: true
  #   accessMode: ReadWriteOnce
  #   size: 10Gi

# ingress:
#   main:
#     annotations: {}
#       # proxy-body-size is set to 0 to remove the body limit on file uploads
#       # nginx.ingress.kubernetes.io/proxy-body-size: "0"
#     hosts:
#       - host: immich.local
#         paths:
#           - path: "/"
#             service:
#               identifier: server
#     # tls: []

rawResources:
  redis:
    apiVersion: redis.redis.opstreelabs.in/v1beta2
    kind: Redis
    spec:
      kubernetesConfig:
        image: 'quay.io/opstree/redis:v7.0.5'
        imagePullPolicy: IfNotPresent
      redisExporter:
        enabled: true
        image: 'quay.io/opstree/redis-exporter:v1.44.0'
        imagePullPolicy: IfNotPresent
      storage:
        volumeClaimTemplate:
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
            # storageClassName: ''
  psql:
    apiVersion: postgresql.cnpg.io/v1
    kind: Cluster
    spec:
      imageName: ghcr.io/tensorchord/cloudnative-pgvecto.rs:16-v0.4.0
      instances: 1
      postgresql:
        shared_preload_libraries:
          - "vectors.so"
      managed:
        roles:
          - name: immich
            superuser: true
            login: true
      bootstrap:
        initdb:
          database: immich
          owner: immich
          secret:
            name: immich-psql
          postInitSQL:
            - CREATE EXTENSION IF NOT EXISTS "vectors";
            - CREATE EXTENSION IF NOT EXISTS "cube" CASCADE;
            - CREATE EXTENSION IF NOT EXISTS "earthdistance" CASCADE;
      storage:
        size: 4Gi
        # storageClass: immich-postgres

# Dependencies

postgresql:
  enabled: false
  image:
    registry: ghcr.io
    repository: immich-app/postgres
    tag: 14-vectorchord0.3.0-pgvectors0.3.0
  global:
    postgresql:
      auth:
        username: immich
        database: immich
        password: immich
    security:
      allowInsecureImages: true
  primary:
    extraEnvVars:
      - name: DB_STORAGE_TYPE
        value: "HDD" # TODO this should be configurable on top level somewhere
      - name: POSTGRES_DB
        value: immich
    customLivenessProbe:
      tcpSocket:
        port: tcp-postgresql
    customReadinessProbe:
      tcpSocket:
        port: tcp-postgresql
    customStartupProbe:
      tcpSocket:
        port: tcp-postgresql
      failureThreshold: 256
    persistence:
      enabled: false
      accessMode: ReadWriteOnce
      size: 100Gi
      storageClass: # provide your storage class
    initdb:
      scripts:
        create-extensions.sql: |
          CREATE EXTENSION cube;
          CREATE EXTENSION earthdistance;
          CREATE EXTENSION vectors;
    containerSecurityContext:
      readOnlyRootFilesystem: false

redis:
  enabled: false
  architecture: standalone
  master:
    persistence:
      enabled: false
  auth:
    enabled: false

# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.1.2/charts/other/app-template/values.schema.json

# These entries are shared between all the Immich components

env:
  REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
  DB_HOSTNAME: "{{ .Release.Name }}-postgresql"
  DB_USERNAME: "{{ .Values.postgresql.global.postgresql.auth.username }}"
  DB_DATABASE_NAME: "{{ .Values.postgresql.global.postgresql.auth.database }}"
  # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
  DB_PASSWORD: "{{ .Values.postgresql.global.postgresql.auth.password }}"
  IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'

# TODO provide top level configs for things like persistence, using included DB, using included redis, DB settings (such as HDD vs SSD mode)
# Also validate them in the checks.yaml

image:
  repository: ghcr.io/immich-app/immich-server
  tag: v1.135.3

immich:
  service:
    server:
      enabled: true
      primary: true
      type: ClusterIP
      ports:
        http:
          enabled: true
          primary: true
          port: 2283
          protocol: HTTP
        metrics-api:
          enabled: false
          port: 8081
          protocol: HTTP
        metrics-ms:
          enabled: false
          port: 8082
          protocol: HTTP
      image:
        repository: ghcr.io/immich-app/immich-server
        pullPolicy: IfNotPresent
      env:
        IMMICH_TELEMETRY_INCLUDE: all
        # {{- if .Values.immich.configuration }}
        #    IMMICH_CONFIG_FILE: /config/immich-config.yaml
        # {{- end }}
      persistence:
        config:
          enabled: true
          type: configMap
          name: "{{ .Release.Name }}-immich-config"
        library:
          enabled: true
          mountPath: /usr/src/app/upload
          name: immich-library
          accessMode: ReadWriteMany
          size: 1Ti
          storageClass: # provide your storage class
          # existingClaim: immich-library Provide your existing PVC
        external:
          enabled: true
          mountPath: /usr/src/app/external
          name: immich-external
          accessMode: ReadWriteMany
          size: 1Ti
          storageClass: # provide your storage class
          # existingClaim: immich-external Provide your existing PVC
      ingress:
        main:
          enabled: false
          annotations:
            # proxy-body-size is set to 0 to remove the body limit on file uploads
            nginx.ingress.kubernetes.io/proxy-body-size: "0"
          hosts:
            - host: immich.local
              paths:
                - path: "/"
          tls: []
    # TODO move to be managed in common values
    # configuration is immich-config.json converted to yaml
    # ref: https://immich.app/docs/install/config-file/
    #
    # configuration:
    # {}
    # trash:
    #   enabled: false
    #   days: 30
    # storageTemplate:
    #   enabled: true
    #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

# Dependencies

postgresql:
  enabled: true
  image:
    registry: ghcr.io
    repository: immich-app/postgres
    tag: 14-vectorchord0.3.0-pgvectors0.3.0
  global:
    postgresql:
      auth:
        username: immich
        database: immich
        password: immich
    security:
      allowInsecureImages: true
  primary:
    extraEnvVars:
      - name: DB_STORAGE_TYPE
        value: "HDD" # TODO this should be configurable on top level somewhere
      - name: POSTGRES_DB
        value: immich
    customLivenessProbe:
      tcpSocket:
        port: tcp-postgresql
    customReadinessProbe:
      tcpSocket:
        port: tcp-postgresql
    customStartupProbe:
      tcpSocket:
        port: tcp-postgresql
      failureThreshold: 256
    persistence:
      enabled: false
      accessMode: ReadWriteOnce
      size: 100Gi
      storageClass: # provide your storage class
    initdb:
      scripts:
        create-extensions.sql: |
          CREATE EXTENSION cube;
          CREATE EXTENSION earthdistance;
          CREATE EXTENSION vectors;
    containerSecurityContext:
      readOnlyRootFilesystem: false

redis:
  enabled: true
  architecture: standalone
  master:
    persistence:
      enabled: false
  auth:
    enabled: false

# Immich components

machine-learning:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-machine-learning
    pullPolicy: IfNotPresent
  env:
    TRANSFORMERS_CACHE: /cache
  persistence:
    cache:
      enabled: true
      size: 10Gi
      # Optional: Set this to pvc to avoid downloading the ML models every start.
      type: emptyDir
      accessMode: ReadWriteMany
      storageClass: # provide your storage class

# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.3.0/charts/other/app-template/values.schema.json

## This chart relies on the common library chart from bjw-s-labs
## You can find it at https://github.com/bjw-s-labs/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

image:
  repository: ghcr.io/immich-app/immich-server
  tag: v2.1.0

immich:
  # configuration is immich-config.json converted to yaml
  # ref: https://immich.app/docs/install/config-file/
  # This configuration is applied to the immich-config.yaml file
  # and mounted to both server and machine-learning containers
  configuration:
    {}
    # trash:
    #   enabled: false
    #   days: 30
    # storageTemplate:
    #   enabled: true
    #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

  # Environment variables shared across all Immich components
  # These can be overridden or extended per-controller in the controllers section
  env:
    {}
    # Database connection settings
    # If not specified, defaults to the included postgresql instance
    # DB_HOSTNAME: ""
    # DB_USERNAME: ""
    # DB_DATABASE_NAME: ""
    # DB_PASSWORD: ""
    #
    # To use a secret for the password:
    # DB_PASSWORD:
    #   valueFrom:
    #     secretKeyRef:
    #       name: immich-secret
    #       key: db-password
    #
    # Redis connection settings
    # If not specified, defaults to the included redis instance
    # REDIS_HOSTNAME: ""
    #
    # Machine Learning URL
    # If not specified, defaults to the machine-learning service
    # IMMICH_MACHINE_LEARNING_URL: ""

# Controllers section is now managed by templates
# You can still override specific values here
controllers:
  {}
  # server:
  #   replicas: 2
  #   containers:
  #     main:
  #       resources:
  #         requests:
  #           memory: 512Mi
  #         limits:
  #           memory: 2Gi
  # machine-learning:
  #   replicas: 1
  #   containers:
  #     main:
  #       resources:
  #         limits:
  #           nvidia.com/gpu: 1

# Service configuration
service:
  {}
  # Override service settings if needed
  # server:
  #   type: LoadBalancer

# Service Monitor configuration
serviceMonitor: {}

# Persistence configuration
persistence:
  library:
    type: persistentVolumeClaim
    # existingClaim: "name-of-existing-claim"
    storageClass: null
    accessMode: ReadWriteMany
    size: 10Gi
    advancedMounts:
      server:
        main:
          - path: /data
  external:
    type: persistentVolumeClaim
    # existingClaim: "name-of-existing-claim"
    storageClass: null
    accessMode: ReadWriteMany
    size: 10Gi
    advancedMounts:
      server:
        main:
          - path: /usr/src/app/external
  machine-learning-cache:
    type: persistentVolumeClaim
    # Optional: Set type to emptyDir to stop caching between pod restarts
    # type: emptyDir
    # existingClaim: "name-of-existing-claim"
    storageClass: null
    accessMode: ReadWriteMany
    size: 10Gi
    advancedMounts:
      machine-learning:
        main:
          - path: /cache

# Ingress configuration
ingress:
  server:
    enabled: false
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: '0'
    hosts:
      - host: immich.local
        paths:
          - path: '/'
    tls: []

# Pod annotations
podAnnotations: {}

#
# Dependencies
# Override these settings as needed for your environment
#

postgresql:
  enabled: true
  image:
    registry: ghcr.io
    repository: immich-app/postgres
    tag: 14-vectorchord0.3.0-pgvectors0.3.0
  global:
    postgresql:
      auth:
        username: immich
        database: immich
        password: null
    security:
      allowInsecureImages: true
  primary:
    extraEnvVars:
      - name: DB_STORAGE_TYPE
        value: 'HDD' # TODO this should be configurable on top level somewhere
      - name: POSTGRES_DB
        value: immich
      - name: POSTGRESQL_STARTUP_TIMEOUT
        value: '256' # time in seconds, default is 60
    customLivenessProbe:
      tcpSocket:
        port: tcp-postgresql
    customReadinessProbe:
      tcpSocket:
        port: tcp-postgresql
    customStartupProbe:
      tcpSocket:
        port: tcp-postgresql
      failureThreshold: 256
    persistence:
      enabled: true
      # existingClaim: "name-of-existing-claim" # Set an existing claim here to use it instead of creating a new one
      accessMode: ReadWriteOnce
      size: 100Gi
      storageClass: null # provide your storage class
    resources:
      requests:
        memory: '512Mi'
      limits:
        memory: '2Gi'
    initdb:
      scripts:
        # This should be unnecessary as we set the POSTGRES_DB env var, but for some reason sometimes the DB is not created
        01-create-db.sql: |
          DO $$
          BEGIN
            IF NOT EXISTS (
              SELECT FROM pg_database WHERE datname = 'immich'
            ) THEN
              CREATE DATABASE immich OWNER immich;
            END IF;
          END
          $$;
        02-create-extensions.sql: |
          CREATE EXTENSION cube;
          CREATE EXTENSION earthdistance;
          CREATE EXTENSION vectors;
    containerSecurityContext:
      readOnlyRootFilesystem: false

redis:
  enabled: true
  architecture: standalone
  master:
    persistence:
      enabled: false
  auth:
    enabled: false

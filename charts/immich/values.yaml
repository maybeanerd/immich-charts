# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-4.3.0/charts/other/app-template/values.schema.json

## This chart relies on the common library chart from bjw-s-labs
## You can find it at https://github.com/bjw-s-labs/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

image:
  repository: ghcr.io/immich-app/immich-server
  tag: v2.1.0

# TODO provide top level configs for things like persistence, using included DB, using included redis, DB settings (such as HDD vs SSD mode)
# Also validate them in the checks.yaml
immich:
  # configuration is immich-config.json converted to yaml
  # ref: https://immich.app/docs/install/config-file/
  configuration: {}
    # trash:
    #   enabled: false
    #   days: 30
    # storageTemplate:
    #   enabled: true
    #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

controllers:
  server:
    enabled: true
    strategy: RollingUpdate
    replicas: 1
    containers:
      main:
        enabled: true
        ports:
          - name: http
            containerPort: 2283
          - name: metrics-api
            containerPort: 8081
          - name: metrics-ms
            containerPort: 8082
        image:
          repository: ghcr.io/immich-app/immich-server
          tag: '{{ .Values.image.tag}}'
          pullPolicy: IfNotPresent
        env:
          REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
          DB_HOSTNAME: '{{ .Release.Name }}-postgresql'
          DB_USERNAME: '{{ .Values.postgresql.global.postgresql.auth.username }}'
          DB_DATABASE_NAME: '{{ .Values.postgresql.global.postgresql.auth.database }}'
          # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
          DB_PASSWORD: '{{ .Values.postgresql.global.postgresql.auth.password }}'
          IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'
          IMMICH_TELEMETRY_INCLUDE: 'all'
          IMMICH_CONFIG_FILE: /config/immich-config.yaml
        probes:
          liveness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /api/server/ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          readiness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /api/server/ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          startup:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /api/server/ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 30

  machine-learning:
    enabled: true
    strategy: RollingUpdate
    replicas: 1
    containers:
      main:
        enabled: true
        ports:
          - name: http
            containerPort: 3003
        image:
          repository: ghcr.io/immich-app/immich-machine-learning
          tag: '{{ .Values.image.tag}}'
          pullPolicy: IfNotPresent
        env:
          REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
          DB_HOSTNAME: '{{ .Release.Name }}-postgresql'
          DB_USERNAME: '{{ .Values.postgresql.global.postgresql.auth.username }}'
          DB_DATABASE_NAME: '{{ .Values.postgresql.global.postgresql.auth.database }}'
          # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
          DB_PASSWORD: '{{ .Values.postgresql.global.postgresql.auth.password }}'
          IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'
          TRANSFORMERS_CACHE: /cache
        probes:
          liveness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          readiness:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 3
          startup:
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /ping
                port: http
              initialDelaySeconds: 0
              periodSeconds: 10
              timeoutSeconds: 1
              failureThreshold: 60

podAnnotations:
  checksum/config: '{{ .Values.immich.configuration | toYaml | sha256sum }}'

service:
  server:
    enabled: true
    primary: true
    type: ClusterIP
    controller: server
    ports:
      http:
        enabled: true
        primary: true
        port: 2283
        protocol: HTTP
      metrics-api:
        enabled: false
        port: 8081
        protocol: HTTP
      metrics-ms:
        enabled: false
        port: 8082
        protocol: HTTP
  machine-learning:
    enabled: true
    primary: true
    type: ClusterIP
    controller: machine-learning
    ports:
      http:
        enabled: true
        primary: true
        port: 3003
        protocol: HTTP

serviceMonitor:
  server:
    serviceName: server
    endpoints:
      - port: metrics-api
        scheme: http
      - port: metrics-ms
        scheme: http

persistence:
  immich-config:
    type: configMap
    name: '{{ .Release.Name }}-immich-config'
    globalMounts:
      - path: /config
        readOnly: false
  library:
    type: persistentVolumeClaim
    # existingClaim: "name-of-existing-claim" # Set an existing claim here to use it instead of creating a new one
    storageClass: null # provide your storage class
    accessMode: ReadWriteMany
    size: 10Gi
    advancedMounts:
      server:
        main:
          - path: /data
  external:
    type: persistentVolumeClaim
    # existingClaim: "name-of-existing-claim" # Set an existing claim here to use it instead of creating a new one
    storageClass: null # provide your storage class
    accessMode: ReadWriteMany
    size: 10Gi
    advancedMounts:
      server:
        main:
          - path: /usr/src/app/external
  machine-learning-cache:
    # Optional: Set this to emptyDir to stop caching between pod restarts
    type: persistentVolumeClaim
    # existingClaim: "name-of-existing-claim" # Set an existing claim here to use it instead of creating a new one
    storageClass: null # provide your storage class
    accessMode: ReadWriteMany
    size: 10Gi
    advancedMounts:
      machine-learning:
        main:
          - path: /cache

ingress:
  server:
    enabled: false
    annotations:
      # proxy-body-size is set to 0 to remove the body limit on file uploads
      nginx.ingress.kubernetes.io/proxy-body-size: '0'
    hosts:
      - host: immich.local
        paths:
          - path: '/'
    tls: []

# Dependencies

postgresql:
  enabled: true
  image:
    registry: ghcr.io
    repository: immich-app/postgres
    tag: 17-vectorchord0.3.0-pgvectors0.3.0
  global:
    postgresql:
      auth:
        username: immich
        database: immich
        password: null
    security:
      allowInsecureImages: true
  primary:
    extraEnvVars:
      - name: DB_STORAGE_TYPE
        value: 'HDD' # TODO this should be configurable on top level somewhere
      - name: POSTGRES_DB
        value: immich
      - name: POSTGRESQL_STARTUP_TIMEOUT
        value: '256' # time in seconds, default is 60
    customLivenessProbe:
      tcpSocket:
        port: tcp-postgresql
    customReadinessProbe:
      tcpSocket:
        port: tcp-postgresql
    customStartupProbe:
      tcpSocket:
        port: tcp-postgresql
      failureThreshold: 256
    persistence:
      enabled: true
      # existingClaim: "name-of-existing-claim" # Set an existing claim here to use it instead of creating a new one
      accessMode: ReadWriteOnce
      size: 100Gi
      storageClass: null # provide your storage class
    resources:
      requests:
        memory: '512Mi'
      limits:
        memory: '2Gi'
    initdb:
      scripts:
        # This should be unnecessary as we set the POSTGRES_DB env var, but for some reason sometimes the DB is not created
        01-create-db.sql: |
          DO $$
          BEGIN
            IF NOT EXISTS (
              SELECT FROM pg_database WHERE datname = 'immich'
            ) THEN
              CREATE DATABASE immich OWNER immich;
            END IF;
          END
          $$;
        02-create-extensions.sql: |
          CREATE EXTENSION cube;
          CREATE EXTENSION earthdistance;
          CREATE EXTENSION vectors;
    containerSecurityContext:
      readOnlyRootFilesystem: false

redis:
  enabled: true
  architecture: standalone
  master:
    persistence:
      enabled: false
  auth:
    enabled: false
